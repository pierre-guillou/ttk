# This is a basic workflow to help you get started with Actions

name: packaging

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branch-ignore:
      - '*'
    tags:
      - 'v*'
      - 'dev*'
      - '*-*-*'
      - '*.*.*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Install macOS dependencies
      run: |
        # ParaView dependencies
        brew cask install xquartz
        brew install wget libomp mesa glew qt
        # TTK dependencies
        brew install boost eigen graphviz embree
        python -m pip install scikit-learn

    - uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Install Spectra dependency
      run: |
        git clone --depth 1 https://github.com/yixuan/spectra
        mkdir build_spectra && cd build_spectra
        cmake ../spectra
        sudo make install

    - name: Install ZFP dependency
      run: |
        git clone --depth 1 https://github.com/LLNL/zfp
        mkdir build_zfp && cd build_zfp
        cmake \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_TESTING=OFF \
          ../zfp
        sudo make -j$(sysctl -n hw.physicalcpu) install

    - name: Fetch & install ttk-paraview
      run: |
        wget https://github.com/topology-tool-kit/ttk-paraview/releases/download/v5.8.1/ttk-paraview.pkg
        sudo installer -pkg ttk-paraview.pkg -target /

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DQt5_DIR=$(brew --prefix qt)/lib/cmake/Qt5 \
          -DPython3_FIND_STRATEGY=LOCATION \
          -DPython3_ROOT_DIR=$(python -c "import sys; print(sys.prefix)") \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          $GITHUB_WORKSPACE

    - name: Build TTK
      run: |
        cd build
        make -j$(sysctl -n hw.physicalcpu)

    - name: Package TTK
      run: |
        cd build
        cpack -G productbuild
