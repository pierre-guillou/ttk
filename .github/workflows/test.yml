name: test_build

on:
  push:
    # triggered on tag pushes with tags beginning with either "v" or "dev"
    branch-ignore:
      - '*'
    tags:
      - 'v*'
      - 'dev*'
      - 'ci*'
  pull_request:
    # also triggered by pull requests on the "dev" branch
    branches:
      - 'dev'

jobs:


  # ------------------#
  # Test Ubuntu build #
  # ------------------#
  test-build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
      name: Checkout TTK source code

    - name: Cache ttk-paraview package
      uses: actions/cache@v2
      id: cache-ttk-paraview
      with:
        path: "ttk-paraview/build/ttk-paraview.deb"
        key: ttk-paraview-${{ matrix.os }}

    - uses: actions/checkout@v2
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      with:
        repository: "topology-tool-kit/ttk-paraview"
        ref: "5.9.0"
        path: "ttk-paraview"
      name: Checkout TTK-ParaView source code

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # TTK dependencies
        sudo apt install -y \
          ccache \
          libboost-system-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libosmesa-dev \
          libsqlite3-dev \
          graphviz \
          ninja-build \
          python3-sklearn \
          zlib1g-dev \
          dpkg-dev

    - name: Install optional dependencies
      uses: ./.github/actions/install-deps-unix

    - name: Cache object files with ccache
      uses: actions/cache@v2
      with:
        path: /home/runner/.ccache
        key: ccache-${{ matrix.os }}-${{ github.sha }}
        restore-keys: ccache-${{ matrix.os }}

    - name: Create & configure ParaView build directory
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      run: |
        cd ttk-paraview
        mkdir build && cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DPARAVIEW_PYTHON_SITE_PACKAGES_SUFFIX=lib/python3/dist-packages \
          -DPARAVIEW_USE_QT=OFF \
          -DVTK_USE_X=OFF \
          -DVTK_OPENGL_HAS_OSMESA=ON \
          -GNinja \
          ..

    - name: Build ParaView
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      run: |
        cd ttk-paraview/build
        cmake --build . --parallel

    - name: Create ParaView package
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      run: |
        cd ttk-paraview/build
        cpack -G DEB

    - name: Install ParaView .deb
      run: |
        cd ttk-paraview/build
        sudo apt install ./ttk-paraview.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -GNinja \
          $GITHUB_WORKSPACE

    - name: Build & install TTK
      run: |
        cd build
        cmake --build . --parallel
        sudo cmake --build . --target install

    - uses: actions/checkout@v2
      with:
        repository: "pierre-guillou/ttk-data"
        ref: "dev"
        path: "ttk-data"
      name: Checkout ttk-data

    - name: Run TTK tests
      uses: ./.github/actions/test-ttk-unix

    - name: Upload result screenshots
      uses: actions/upload-artifact@v2
      with:
        name: screenshots-${{ matrix.os }}.tar.gz
        path: ttk-data/tests/screenshots.tar.gz

  # -----------------#
  # Test macOS build #
  # -----------------#
  test-build-macos:
    runs-on: macos-latest
    env:
      CCACHE_DIR: /Users/runner/work/ttk/.ccache
    steps:
    - uses: actions/checkout@v2
      name: Checkout TTK source code

    - name: Remove hosted Python
      run: |
        sudo rm -rf /usr/local/Frameworks/Python.framework

    - name: Install macOS dependencies
      run: |
        # ParaView dependencies
        brew install --cask xquartz
        brew install wget libomp mesa glew ninja python
        # TTK dependencies
        brew install boost eigen graphviz numpy embree ccache
        python3 -m pip install scikit-learn
        # prepend ccache to system path
        echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH

    - name: Install optional dependencies
      uses: ./.github/actions/install-deps-unix

    - name: Cache object files with ccache
      uses: actions/cache@v2
      with:
        path: /Users/runner/work/ttk/.ccache
        key: ccache-macos-${{ github.sha }}
        restore-keys: ccache-macos

    - name: Cache ttk-paraview package
      uses: actions/cache@v2
      id: cache-ttk-paraview
      with:
        path: "ttk-paraview/build/ttk-paraview.tar.gz"
        key: ttk-paraview-macos

    - uses: actions/checkout@v2
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      with:
        repository: "topology-tool-kit/ttk-paraview"
        ref: "5.9.0"
        path: "ttk-paraview"
      name: Checkout TTK-ParaView source code

    - name: Create & configure ParaView build directory
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      run: |
        # switch to Xcode 11 since Xcode 12 breaks the ParaView build
        sudo xcode-select -s "/Applications/Xcode_11.7.app"
        cd ttk-paraview
        mkdir build && cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DPARAVIEW_USE_QT=OFF \
          -DPython3_ROOT_DIR=$(brew --prefix python) \
          -GNinja \
          ..

    - name: Build ParaView
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      run: |
        cd ttk-paraview/build
        cmake --build . --parallel
        sudo cmake --build . --target install

    - name: Create ParaView package
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      run: |
        cd ttk-paraview/build
        sudo cpack -G TGZ

    - name: Install ParaView
      run: |
        cd ttk-paraview/build
        tar xzvf ttk-paraview.tar.gz
        sudo cp -r ttk-paraview/* /usr/local

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DPython3_ROOT_DIR=$(brew --prefix python) \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -GNinja \
          $GITHUB_WORKSPACE

    - name: Build & install TTK
      run: |
        cd build
        cmake --build . --parallel
        sudo cmake --build . --target install

    - uses: actions/checkout@v2
      with:
        repository: "pierre-guillou/ttk-data"
        ref: "dev"
        path: "ttk-data"
      name: Checkout ttk-data

    - name: Run TTK tests
      uses: ./.github/actions/test-ttk-unix

    - name: Upload result screenshots
      uses: actions/upload-artifact@v2
      with:
        name: screenshots-macOS.tar.gz
        path: ttk-data/tests/screenshots.tar.gz

  # ------------------ #
  # Test Windows build #
  # ------------------ #
  test-build-windows:
    runs-on: windows-latest
    env:
      VCVARS: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
      PV_DIR: C:\Program Files\TTK-ParaView
      TTK_DIR: C:\Program Files (x86)\ttk
      CONDA_ROOT: C:\Miniconda
    steps:
    - uses: actions/checkout@v2
      name: Checkout TTK source code

    - name: Cache ttk-paraview package
      uses: actions/cache@v2
      id: cache-ttk-paraview
      with:
        path: "ttk-paraview/build/ttk-paraview.exe"
        key: ttk-paraview-${{ runner.os }}

    - uses: actions/checkout@v2
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      with:
        repository: "topology-tool-kit/ttk-paraview"
        ref: "5.9.0"
        path: "ttk-paraview"
      name: Checkout TTK-ParaView source code

    - uses: s-weigand/setup-conda@v1

    - name: Install dependencies with conda
      shell: bash
      run: |
        conda install -c conda-forge boost glew eigen spectralib zfp scikit-learn openmp graphviz

    - name: Remove hosted Python
      shell: bash
      run: |
        rm -rf C:/hostedtoolcache/windows/Python

    - name: Create & configure ParaView build directory
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "%VCVARS%"
        cd ttk-paraview
        mkdir build
        cd build
        cmake ^
          -DPARAVIEW_USE_QT=OFF ^
          -DPython3_ROOT_DIR="%CONDA_ROOT%" ^
          -DCMAKE_BUILD_TYPE=Release ^
          -GNinja ^
          ..

    - name: Build ParaView
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "%VCVARS%"
        cd ttk-paraview/build
        cmake --build . --config Release --parallel

    - name: Create ParaView package
      if: steps.cache-ttk-paraview.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd ttk-paraview/build
        cpack -G NSIS64

    - name: Install ParaView
      shell: cmd
      run: |
        cd ttk-paraview/build
        ttk-paraview.exe /S

    - name: Create & configure TTK build directory
      shell: cmd
      run: |
        set CMAKE_PREFIX_PATH=%CONDA_ROOT%\Library\lib\cmake;%CONDA_ROOT%\Library\share\eigen3\cmake;%CONDA_ROOT%\Library\cmake;%ProgramFiles%\TTK-ParaView\lib\cmake
        call "%VCVARS%"
        mkdir build
        cd build
        cmake ^
          -DCMAKE_POLICY_DEFAULT_CMP0092=NEW ^
          -DBUILD_SHARED_LIBS:BOOL=TRUE ^
          -DPython3_ROOT_DIR="%CONDA_ROOT%" ^
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE ^
          -DTTK_BUILD_VTK_WRAPPERS=TRUE ^
          -DTTK_BUILD_STANDALONE_APPS=TRUE ^
          -DTTK_ENABLE_KAMIKAZE=TRUE ^
          -DTTK_ENABLE_OPENMP=TRUE ^
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE ^
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE ^
          -G"Visual Studio 16 2019" ^
          -Tclangcl ^
          ..

    - name: Build & install TTK
      shell: bash
      run: |
        cd build
        cmake --build . --config Release --parallel --target install
        # set PATH environment variable
        echo "$PV_DIR/bin" >> $GITHUB_PATH
        echo "$TTK_DIR/bin" >> $GITHUB_PATH

    - name: Test C++ example
      shell: cmd
      run: |
        call "%VCVARS%"
        set CMAKE_PREFIX_PATH=%TTK_DIR%\lib\cmake;%PV_DIR%\lib\cmake
        cd %GITHUB_WORKSPACE%\examples\c++
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" -Tclangcl ..
        cmake --build . --config Release --parallel
        Release\ttkExample-c++.exe -i ..\..\data\inputData.off

    - name: Test VTK-C++ example
      shell: cmd
      run: |
        call "%VCVARS%"
        set CMAKE_PREFIX_PATH=%TTK_DIR%\lib\cmake;%PV_DIR%\lib\cmake
        cd %GITHUB_WORKSPACE%\examples\vtk-c++
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" -Tclangcl ..
        cmake --build . --config Release --parallel
        Release\ttkExample-vtk-c++.exe -i ..\..\data\inputData.vtu

    - name: Test Python example
      shell: cmd
      run: |
        set PYTHONPATH=%PV_DIR%\bin\Lib\site-packages;%TTK_DIR%\bin\Lib\site-packages;%CONDA_ROOT%\Lib
        cd %GITHUB_WORKSPACE%\examples\python
        python example.py ..\data\inputData.vtu

    - name: Test pvpython example
      shell: cmd
      run: |
        set PYTHONPATH=%CONDA_ROOT%\Lib
        set PV_PLUGIN_PATH=%TTK_DIR%\bin\plugins
        cd %GITHUB_WORKSPACE%\examples\pvpython
        pvpython.exe example.py ..\data\inputData.vtu

    - name: Test standalone
      shell: cmd
      run: |
        cd %GITHUB_WORKSPACE%\examples\vtk-c++
        ttkHelloWorldCmd.exe -i %GITHUB_WORKSPACE%\examples\data\inputData.vtu
